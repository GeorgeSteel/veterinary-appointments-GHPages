{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["Date","_ref","date","index","deleteDate","react_default","a","createElement","className","pet","owner","hour","symptoms","type","onClick","Form","props","initialState","_useState","useState","_useState2","Object","slicedToArray","appointment","setAppointment","handleChange","e","objectSpread","defineProperty","target","name","value","Fragment","onSubmit","preventDefault","createDate","placeholder","onChange","App","initialDates","JSON","parse","localStorage","getItem","_useState3","_useState4","setDate","idx","newDates","toConsumableArray","splice","useEffect","setItem","stringify","title","length","newDate","concat","map","App_Date","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e82585c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction Date({date, index, deleteDate}) {\n  return(\n    <div className=\"cita\">\n      <p>Pet: <span>{ date.pet }</span></p>\n      <p>Owner: <span>{ date.owner }</span></p>\n      <p>Date: <span>{ date.date }</span></p>\n      <p>Hour: <span>{ date.hour }</span></p>\n      <p>Symptoms: <span>{ date.symptoms }</span></p>\n      <button className=\"button eliminar u-full-width\" type=\"button\" onClick={() => deleteDate(index)}>Delete X</button>\n    </div>\n  )\n}\n\nfunction Form(props) {\n  const initialState = {\n    pet: '',\n    owner: '',\n    date: '',\n    hour: '',\n    symptoms: ''\n  };\n\n  const [appointment, setAppointment] = useState(initialState);\n\n  const handleChange = e => {\n    setAppointment({\n      ...appointment,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // send the date to the main componennt\n    props.createDate(appointment);\n\n    // reset form\n    setAppointment(initialState);\n  }\n\n  return (\n    <React.Fragment>\n      <h2>Add Appointment</h2>\n      <form onSubmit={ handleSubmit }>\n        <label>Pet's Name</label>\n        <input \n          type=\"text\" \n          name=\"pet\"\n          className=\"u-full-width\" \n          placeholder=\"Pet's Name\" \n          onChange={ handleChange }\n          value={ appointment.pet }\n        />\n\n        <label>Owner's Name</label>\n        <input \n          type=\"text\" \n          name=\"owner\"\n          className=\"u-full-width\"  \n          placeholder=\"Owner's Name\" \n          onChange={ handleChange }\n          value={ appointment.owner }\n        />\n\n        <label>Date</label>\n        <input \n          type=\"date\" \n          className=\"u-full-width\"\n          name=\"date\"\n          onChange={ handleChange }\n          value={ appointment.date }\n        />               \n\n        <label>Hour</label>\n        <input \n          type=\"time\" \n          className=\"u-full-width\"\n          name=\"hour\" \n          onChange={ handleChange }\n          value={ appointment.hour }\n        />\n\n        <label>Symptoms</label>\n        <textarea \n          className=\"u-full-width\"\n          name=\"symptoms\"\n          onChange={ handleChange }\n          value={ appointment.symptoms }\n        ></textarea>\n\n        <button type=\"submit\" className=\"button-primary u-full-width\">Add</button>\n      </form>\n    </React.Fragment>\n  );\n}\n\nfunction App() {\n  let initialDates = JSON.parse(localStorage.getItem('dates'));\n\n  if (!initialDates) {\n    initialDates = [];\n  }\n\n  const [date, setDate] = useState(initialDates);\n\n  // add new dates into the state\n  const createDate = newDate => {\n    const newDates = [...date, newDate];\n    // save in the state\n    setDate(newDates);\n  }\n\n  // delete date\n  const deleteDate = idx => {\n    const newDates = [...date];\n    newDates.splice(idx, 1);\n\n    setDate(newDates);\n  }\n\n  useEffect(\n    () => {\n      let initialDates = JSON.parse(localStorage.getItem('dates'));\n\n      if (initialDates) {\n        localStorage.setItem('dates', JSON.stringify(date));\n      } else {\n        localStorage.setItem('dates', JSON.stringify([]));\n      }\n    }, [date]\n  )\n\n  // set the title conditionally\n  const title = date.length === 0 ? 'No dates added' : 'Dates Management';\n\n  return (\n    <React.Fragment>\n      <h1>Patient Manager</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Form \n              createDate={ createDate }\n            />\n          </div>\n          <div className=\"one-half column\">\n            <h1>{ title }</h1>\n            { date.map((date, idx) => (\n              <Date\n                key={idx}\n                index={idx}\n                date={date}\n                deleteDate={deleteDate}\n              />\n            )) }\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}